{"version":3,"sources":["components/CustomerList/CustomerList.tsx","components/TextInput/TextInput.tsx","containers/Customers.tsx","App.tsx","serviceWorker.ts","redux/actions/customerActions.ts","redux/reducers/customerReducer.ts","redux/reducers/rootReducer.js","redux/store.tsx","index.tsx"],"names":["CustomerList","_ref","customers","console","log","react_default","a","createElement","map","customer","i","key","firstName","TextInput","inputChange","name","className","type","onChange","Customers","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputChange","e","value","currentTarget","setState","newCustomer","handleOnSubmit","state","prevState","concat","toConsumableArray","components_TextInput_TextInput","onClick","components_CustomerList_CustomerList","Component","App","containers_Customers","Boolean","window","location","hostname","match","CustomerActionTypes","initialCustomerState","combineReducers","arguments","length","undefined","action","ADD_CUSTOMER","objectSpread","payload","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","apply","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAoBeA,EAjBM,SAAAC,GAIf,IAHJC,EAGID,EAHJC,UAMA,OAFAC,QAAQC,IAAIF,GAGVG,EAAAC,EAAAC,cAAA,eACGL,GACCA,EAAUM,IAAI,SAACC,EAAUC,GACvB,OAAOL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,GAAID,EAASG,eCCxBC,EARG,SAAAZ,GAA4C,IAAzCa,EAAyCb,EAAzCa,YAAaC,EAA4Bd,EAA5Bc,KAChC,OACEV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,cACbX,EAAAC,EAAAC,cAAA,SAAOU,KAAK,OAAOF,KAAMA,EAAMG,SAAUJ,MC6DhCK,cAjDb,SAAAA,EAAYC,GAAwB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClCE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,cAAgB,SACdC,GACS,IACDC,EAAUD,EAAEE,cAAZD,MACRT,EAAKW,SAAS,CACZC,YAAa,CACXrB,UAAWkB,MAhBmBT,EAqBpCa,eAAiB,WACf,IAAMD,EAAc,CAClBrB,UAAWS,EAAKc,MAAMF,YAAYrB,WAGpCS,EAAKW,SAAS,SAAAI,GAAS,MAAK,CAC1BlC,UAAS,GAAAmC,OAAAf,OAAAgB,EAAA,EAAAhB,CAAMc,EAAUlC,WAAhB,CAA2B+B,QAzBtCZ,EAAKc,MAAQ,CACXjC,UAAW,GACX+B,YAAa,CACXrB,UAAW,KALmBS,wEA+Bd,IACZnB,EAAcsB,KAAKW,MAAnBjC,UAER,OACEG,EAAAC,EAAAC,cAAA,WAASS,UAAU,aACjBX,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACgC,EAAD,CACEzB,YAAaU,KAAKI,cAClBb,KAAK,cAEPV,EAAAC,EAAAC,cAAA,UAAQiC,QAAShB,KAAKU,gBAAtB,SACA7B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACkC,EAAD,CAAcvC,UAAWA,YA5CTwC,aCRTC,EARO,WACpB,OACEtC,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAACqC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DCZMC,wFAsBL,ICXDC,EAAuC,CAC3CjD,UAAW,IChBEkD,4BAAgB,CAC7BlD,UDqBE,WAA0C,IAAzCiC,EAAyCkB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjCF,EAAsBK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5C,OAAQC,EAAOvC,MACb,KAAKiC,EAAoBO,aACvB,OAAOnC,OAAAoC,EAAA,EAAApC,CAAA,GACFa,EADL,CAEEjC,UAAWsD,EAAOG,UAGtB,QACE,OAAOxB,cE3BPyB,EAAa,CAACC,KCapB,IASMC,EDbUC,sBACZC,OACAT,EACAU,8BAEEC,kBAAeC,WAAf,EAAmBP,KCWzBQ,IAASC,OAAOhE,EAAAC,EAAAC,cAZgB,SAAAa,GAC9B,OACEf,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CAAUR,MAAO1C,EAAM0C,OACrBzD,EAAAC,EAAAC,cAACgE,EAAD,QASU,CAAMT,MAAOA,IAAWU,SAASC,eAC/C,SLyGI,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b8dc8f22.chunk.js","sourcesContent":["import React from 'react';\nimport { ICustomer } from '../../containers/Customers';\n\nconst CustomerList = ({\n  customers\n}: {\n  customers: Array<ICustomer>;\n}) => {\n  console.log(customers);\n\n  return (\n    <section>\n      {customers &&\n        customers.map((customer, i) => {\n          return <li key={i}>{customer.firstName}</li>;\n        })}\n    </section>\n  );\n};\n\nexport default CustomerList;\n","import React from 'react';\n\nexport interface ITextInputProps {\n  inputChange(event: React.SyntheticEvent<HTMLInputElement>): void;\n  name: string;\n}\n\nconst TextInput = ({ inputChange, name }: ITextInputProps) => {\n  return (\n    <div className=\"inputField\">\n      <input type=\"text\" name={name} onChange={inputChange} />\n    </div>\n  );\n};\n\nexport default TextInput;\n","import React, { Component } from 'react';\nimport CustomerList from '../components/CustomerList/CustomerList';\nimport TextInput from '../components/TextInput/TextInput';\n\nexport interface ICustomer {\n  firstName: string;\n  lastName?: string;\n  dob?: String;\n}\n\ninterface ICustomersProps {}\n\ninterface ICustomersState {\n  customers: Array<ICustomer>;\n  newCustomer: {\n    firstName: string;\n    lastName?: string;\n    dob?: String;\n  };\n}\n\nclass Customers extends Component<ICustomersProps, ICustomersState> {\n  constructor(props: ICustomersProps) {\n    super(props);\n    this.state = {\n      customers: [],\n      newCustomer: {\n        firstName: ''\n      }\n    };\n  }\n\n  onInputChange = (\n    e: React.SyntheticEvent<HTMLInputElement>\n  ): void => {\n    const { value } = e.currentTarget;\n    this.setState({\n      newCustomer: {\n        firstName: value\n      }\n    });\n  };\n\n  handleOnSubmit = () => {\n    const newCustomer = {\n      firstName: this.state.newCustomer.firstName\n    };\n\n    this.setState(prevState => ({\n      customers: [...prevState.customers, newCustomer]\n    }));\n  };\n\n  render(): JSX.Element {\n    const { customers } = this.state;\n\n    return (\n      <section className=\"customers\">\n        <h1>tsReact</h1>\n        <TextInput\n          inputChange={this.onInputChange}\n          name=\"firstName\"\n        />\n        <button onClick={this.handleOnSubmit}>+ Add</button>\n        <hr />\n        <CustomerList customers={customers} />\n      </section>\n    );\n  }\n}\n\nexport default Customers;\n\n// import React, { Component } from 'react';\n// import CustomerList from '../components/CustomerList/CustomerList';\n// import TextInput from '../components/TextInput/TextInput';\n// import { connect } from 'react-redux';\n// import { Action } from 'redux';\n// import { ThunkDispatch } from 'redux-thunk';\n// import {\n//   addCustomer,\n//   ICustomerAddAction\n// } from '../redux/actions/customerActions';\n\n// export interface ICustomer {\n//   firstName: string;\n//   lastName?: string;\n//   dob?: String;\n// }\n\n// interface ICustomersProps {\n//   addCustomer: (\n//     newCustomer?: ICustomer\n//   ) => Promise<ICustomerAddAction>;\n// }\n\n// interface ICustomersState {\n//   customers: Array<ICustomer>;\n//   newCustomer: {\n//     firstName: string;\n//     lastName?: string;\n//     dob?: String;\n//   };\n// }\n\n// interface DispatchFromProps {\n//   addCustomer: ICustomerAddAction;\n// }\n\n// class Customers extends Component<ICustomersProps, ICustomersState> {\n//   constructor(props: ICustomersProps) {\n//     super(props);\n//     this.state = {\n//       customers: [],\n//       newCustomer: {\n//         firstName: ''\n//       }\n//     };\n//   }\n\n//   onInputChange = (\n//     e: React.SyntheticEvent<HTMLInputElement>\n//   ): void => {\n//     const { value } = e.currentTarget;\n//     this.setState({\n//       newCustomer: {\n//         firstName: value\n//       }\n//     });\n//   };\n\n//   handleOnSubmit = () => {\n//     const newCustomer = {\n//       firstName: this.state.newCustomer.firstName\n//     };\n\n//     this.props.addCustomer(newCustomer);\n//     // this.setState(prevState => ({\n//     //   customers: [...prevState.customers, newCustomer]\n//     // }));\n//   };\n\n//   render(): JSX.Element {\n//     const { customers } = this.state;\n\n//     return (\n//       <section className=\"customers\">\n//         <h1>tsReact</h1>\n//         <TextInput\n//           inputChange={this.onInputChange}\n//           name=\"firstName\"\n//         />\n//         <button onClick={this.handleOnSubmit}>+ Add</button>\n//         <hr />\n//         <CustomerList customers={customers} />\n//       </section>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = (\n//   dispatch: ThunkDispatch<any, any, Action>\n// ) => {\n//   return {\n//     addCustomer: (newCustomer: ICustomer) =>\n//       dispatch(addCustomer(newCustomer))\n//   };\n// };\n\n// export default connect<DispatchFromProps, void>(\n//   null,\n//   mapDispatchToProps\n// )(Customers);\n","import React from 'react';\nimport './App.css';\nimport Customers from './containers/Customers';\nimport { addCustomer } from './redux/actions/customerActions';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Customers />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Dispatch } from 'redux';\n\n// Import Customer Typing\nimport { ICustomer } from '../reducers/customerReducer';\n\n// Create Action Constants\nexport enum CustomerActionTypes {\n  ADD_CUSTOMER = 'ADD_CUSTOMER'\n}\n\n// Interface for Add Customer Action Type\nexport interface ICustomerAddAction {\n  type: CustomerActionTypes.ADD_CUSTOMER;\n  payload: ICustomer[];\n}\n\nexport interface ICustomerProps {\n  newCustomer: ICustomer;\n}\n\n/* \nCombine the action types with a union (we assume there are more)\nexample: export type CharacterActions = IGetAllAction | IGetOneAction ... \n*/\nexport type CustomerActions = ICustomerAddAction;\n\n/* ADD Action\n<Promise<Return Type>, State Interface, Type of Param, Type of Action> */\nexport const addCustomer = (newCustomer: ICustomer) => (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: CustomerActionTypes.ADD_CUSTOMER,\n    payload: newCustomer\n  });\n};\n","import { Reducer } from 'redux';\nimport {\n  CustomerActions,\n  CustomerActionTypes\n} from '../actions/customerActions';\n\n// Define the Customer type\nexport interface ICustomer {\n  firstName: string;\n}\n\n// Define the Customer State\nexport interface ICustomerState {\n  readonly customers: ICustomer[];\n}\n\n// Define the initial state\nconst initialCustomerState: ICustomerState = {\n  customers: []\n};\n\nexport const customerReducer: Reducer<\n  ICustomerState,\n  CustomerActions\n> = (state = initialCustomerState, action) => {\n  switch (action.type) {\n    case CustomerActionTypes.ADD_CUSTOMER: {\n      return {\n        ...state,\n        customers: action.payload\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { customerReducer } from './customerReducer';\nexport default combineReducers({\n  customers: customerReducer\n});\n","import { createStore, applyMiddleware, Store } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { ICustomerState } from './reducers/customerReducer';\n\nconst middleware = [thunk];\n\n// Create an interface for the application state\nexport interface IAppState {\n  customers: ICustomerState;\n}\n\n// Create a configure store function of type `IAppState`\nexport default function configureStore(): Store<IAppState, any> {\n  const store = createStore(\n    rootReducer,\n    undefined,\n    composeWithDevTools(\n      /* logger must be the last middleware in chain to log actions */\n      applyMiddleware(...middleware)\n    )\n  );\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport configureStore, { IAppState } from './redux/store';\n\n// Store type from Redux\nimport { Store } from 'redux';\n\ninterface IProps {\n  store: Store<IAppState>;\n}\n\n/* \nCreate a root component that receives the store via props\nand wraps the App component with Provider, giving props to containers\n*/\nconst Root: React.SFC<IProps> = props => {\n  return (\n    <Provider store={props.store}>\n      <App />\n    </Provider>\n  );\n};\n\n// Generate the store\nconst store = configureStore();\n\n// Render the App\nReactDOM.render(<Root store={store} />, document.getElementById(\n  'root'\n) as HTMLElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}